/* Passport is general helpers for handling auth in express apps. */
import passport from 'passport'
/* Strategy is helpers for authenticating with a specific method  */
import { Strategy as GoogleStrategy } from 'passport-google-oauth20'
/* Secret keys */
import keys from '../config/keys'

/* Import Models */
import mongoose from 'mongoose'
/* import User from mongoose.model('User')*/
import User from '../models/users.models'

/* Google OAuth process:
   - Passport uses google settings to go and ask for user's permission.
   - Google returns a code, passport uses it to go and fetch profile.
   - I take this profile, and create a user if it doesnt exist,
   or return an existing one.
   - done() function passes it to serialize user, which stores user id in cookie
   (I tell passport to use cookie session in server.js and it picks up on it somehow)
   - When I request a user, passport takes a session cookie, finds user by it,
   puts it into req.user, which I then return.
   Just like that, Im creating users, and I can do anything I want with them!
   Store and return any info and whatever! Brillianto.
*/

passport.serializeUser((user, done)=>{
    /* Once OAuth flow is done, and the function below, in .use() has returned a user,
       I serialize him to put him into a cookie he can use to log in. */
    /* Id is not googleId, it's an unique id automatically generated by mongo. */
    done(null, user.id)
    /* And passport will automatically put this into a cookie? */
})

passport.deserializeUser((userId, done)=>{
    /* Take the cookie that was previously set by passport,
       find user, and return him. */
    User.findById(userId).then((user)=>{
	done(null, user)
    })
})


/* Tell passport to use GoogleStrategy */
/* Keys are generated on GCP dashboard as Google+ API credentials */
/* CallbackURL is where google redirects user after he clicks "Allow",
   giving me the code I can use to grab their info. */
passport.use(
    new GoogleStrategy(
	{
	    clientID: keys.googleClientID,
	    clientSecret: keys.googleClientSecret,
	    callbackURL: '/api/v1/profiles/google/callback'
	},
	async (accessToken, refreshToken, profile, done)=>{
	    /* When google redirects you to /auth/google/callback and gives you the code,
	       passport automatically goes to google and fetches the profile data. */
	    const existingUser = await User.findOne({ googleId: profile.id })

	    /* Check if user already exists. */
	    if (existingUser) {
		console.log(`User ${profile.emails[0].value} already exists!`)
		/* Once finished creating/getting user, I can call done that
		   tells passport to move along. */
		done(null, existingUser)
	    } else {
		const createdUser = await new User({
		    googleId: profile.id,
		    email: profile.emails[0].value
		}).save()
		console.log(`User ${profile.emails[0].value} created!`)
		done(null, createdUser)
	    }


	}
    )
)

